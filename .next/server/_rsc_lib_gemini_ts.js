"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_gemini_ts";
exports.ids = ["_rsc_lib_gemini_ts"];
exports.modules = {

/***/ "(rsc)/./lib/gemini.ts":
/*!***********************!*\
  !*** ./lib/gemini.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiFinancialService: () => (/* binding */ GeminiFinancialService),\n/* harmony export */   geminiService: () => (/* binding */ geminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// Lazy, safe initialization so missing GEMINI_API_KEY doesn't break build/runtime\nlet genAI = null;\nfunction ensureGenAI() {\n    const key = process.env.GEMINI_API_KEY;\n    if (!key) return null;\n    if (!genAI) {\n        try {\n            genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(key);\n        } catch (e) {\n            console.error(\"Gemini init failed:\", e);\n            genAI = null;\n        }\n    }\n    return genAI;\n}\nclass GeminiFinancialService {\n    constructor(){\n        const sdk = ensureGenAI();\n        const modelName = process.env.GEMINI_MODEL || \"gemini-1.5-flash\";\n        if (sdk) {\n            try {\n                this.model = sdk.getGenerativeModel({\n                    model: modelName\n                });\n                if (true) {\n                    console.info(`[Gemini] Using model: ${modelName}`);\n                }\n            } catch (e) {\n                console.error(\"Failed to init Gemini model\", modelName, e);\n                // Fallback to a widely available model\n                try {\n                    this.model = sdk.getGenerativeModel({\n                        model: \"gemini-1.5-flash\"\n                    });\n                    if (true) {\n                        console.info(\"[Gemini] Fallback model: gemini-1.5-flash\");\n                    }\n                } catch  {}\n            }\n        } else {\n            this.model = null;\n        }\n    }\n    async getRealTimeMarketData() {\n        const prompt = `\n    Provide current Indian financial market data in JSON format:\n    - 10-year G-Sec yield (%)\n    - 5-year G-Sec yield (%)\n    - Nifty 50 index\n    - Sensex index  \n    - USD/INR exchange rate\n    - Current inflation rate (%)\n    - RBI repo rate (%)\n    \n    Return ONLY valid JSON with realistic current values for Indian markets.\n    `;\n        // If model unavailable (no API key), return fallback immediately\n        if (!this.model) {\n            return {\n                gSecYield10Y: 7.15,\n                gSecYield5Y: 6.95,\n                nifty: 19800,\n                sensex: 66500,\n                rupeeUSD: 83.25,\n                inflationRate: 5.85,\n                repoRate: 6.50\n            };\n        }\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            // Parse JSON response\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n            // Fallback data if parsing fails\n            return {\n                gSecYield10Y: 7.15,\n                gSecYield5Y: 6.95,\n                nifty: 19800,\n                sensex: 66500,\n                rupeeUSD: 83.25,\n                inflationRate: 5.85,\n                repoRate: 6.50\n            };\n        } catch (error) {\n            console.error(\"Gemini API error:\", error);\n            // Return realistic fallback data\n            return {\n                gSecYield10Y: 7.15,\n                gSecYield5Y: 6.95,\n                nifty: 19800,\n                sensex: 66500,\n                rupeeUSD: 83.25,\n                inflationRate: 5.85,\n                repoRate: 6.50\n            };\n        }\n    }\n    async getBondPriceGuidance(bondSymbol, couponRate, rating, maturityYears, currentMarketData) {\n        const prompt = `\n    As a bond pricing expert, analyze this Indian corporate bond:\n    \n    Bond Details:\n    - Symbol: ${bondSymbol}\n    - Coupon Rate: ${couponRate}%\n    - Credit Rating: ${rating}\n    - Years to Maturity: ${maturityYears}\n    \n    Market Context:\n    - 10Y G-Sec Yield: ${currentMarketData.gSecYield10Y}%\n    - 5Y G-Sec Yield: ${currentMarketData.gSecYield5Y}%\n    - Repo Rate: ${currentMarketData.repoRate}%\n    - Inflation: ${currentMarketData.inflationRate}%\n    - Nifty: ${currentMarketData.nifty}\n    \n    Calculate fair value price (₹ per token, face value ₹1000) and provide analysis.\n    Consider credit spread based on rating, yield curve, and market conditions.\n    \n    Return ONLY valid JSON with these fields:\n    {\n      \"symbol\": \"${bondSymbol}\",\n      \"currentPrice\": number, \n      \"yield\": number,\n      \"spread\": number,\n      \"rating\": \"${rating}\",\n      \"maturityDate\": \"YYYY-MM-DD\",\n      \"recommendedAction\": \"BUY|SELL|HOLD\",\n      \"confidence\": number (0-1),\n      \"marketSentiment\": \"string description\"\n    }\n    `;\n        if (!this.model) {\n            // Fallback calculation when API is unavailable\n            return this.calculateFallbackPrice(bondSymbol, couponRate, rating, maturityYears, currentMarketData);\n        }\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            // Parse JSON response\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                const guidance = JSON.parse(jsonMatch[0]);\n                return guidance;\n            }\n            // Fallback calculation\n            return this.calculateFallbackPrice(bondSymbol, couponRate, rating, maturityYears, currentMarketData);\n        } catch (error) {\n            console.error(\"Gemini price guidance error:\", error);\n            return this.calculateFallbackPrice(bondSymbol, couponRate, rating, maturityYears, currentMarketData);\n        }\n    }\n    calculateFallbackPrice(symbol, couponRate, rating, maturityYears, marketData) {\n        // Simple bond pricing model\n        const ratingSpread = this.getRatingSpread(rating);\n        const baseYield = maturityYears <= 5 ? marketData.gSecYield5Y : marketData.gSecYield10Y;\n        const requiredYield = baseYield + ratingSpread;\n        // PV calculation for bond price\n        const annualCoupon = couponRate * 10 // ₹ per year for ₹1000 face value\n        ;\n        const discountRate = requiredYield / 100;\n        let pv = 0;\n        for(let year = 1; year <= maturityYears; year++){\n            const payment = year === maturityYears ? annualCoupon + 1000 : annualCoupon;\n            pv += payment / Math.pow(1 + discountRate, year);\n        }\n        const currentPrice = Math.round(pv * 100) / 100;\n        return {\n            symbol,\n            currentPrice,\n            yield: requiredYield,\n            spread: ratingSpread * 100,\n            rating,\n            maturityDate: new Date(Date.now() + maturityYears * 365 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n            recommendedAction: currentPrice > 1000 ? \"SELL\" : currentPrice < 950 ? \"BUY\" : \"HOLD\",\n            confidence: 0.75,\n            marketSentiment: currentPrice > 1000 ? \"Overvalued relative to risk\" : \"Fairly valued given credit profile\"\n        };\n    }\n    getRatingSpread(rating) {\n        const spreads = {\n            \"AAA\": 0.50,\n            \"AA+\": 0.75,\n            \"AA\": 1.00,\n            \"AA-\": 1.25,\n            \"A+\": 1.50,\n            \"A\": 1.75,\n            \"A-\": 2.00,\n            \"BBB+\": 2.50,\n            \"BBB\": 3.00,\n            \"BBB-\": 3.50\n        };\n        return spreads[rating] || 2.00 // Default spread\n        ;\n    }\n    async getMarketNews() {\n        const prompt = `\n    Provide 3-5 current Indian bond market news headlines that would affect corporate bond trading.\n    Focus on interest rates, RBI policy, corporate credit, and market conditions.\n    Return as JSON array of strings.\n    `;\n        if (!this.model) {\n            return [\n                \"RBI maintains repo rate at 6.5% in latest policy review\",\n                \"Corporate bond issuances up 15% QoQ amid strong demand\",\n                \"G-Sec yields stable ahead of inflation data release\"\n            ];\n        }\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            const jsonMatch = text.match(/\\[[\\s\\S]*\\]/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n            return [\n                \"RBI maintains repo rate at 6.5% in latest policy review\",\n                \"Corporate bond issuances up 15% QoQ amid strong demand\",\n                \"G-Sec yields stable ahead of inflation data release\"\n            ];\n        } catch (error) {\n            console.error(\"Gemini news error:\", error);\n            return [\n                \"RBI maintains repo rate at 6.5% in latest policy review\",\n                \"Corporate bond issuances up 15% QoQ amid strong demand\",\n                \"G-Sec yields stable ahead of inflation data release\"\n            ];\n        }\n    }\n    // General purpose assistant for Q&A and explanations\n    async askAssistant(question, context) {\n        const systemPreamble = `You are BondBazaar's AI assistant for the SEBI hackathon. \nProvide clear, compliant, and India-focused answers about corporate bonds, pricing, risks, settlements, KYC, and how to use the BondBazaar app. \nDo NOT provide financial advice; instead give educational insights and always include a short disclaimer when giving opinions. \nPrefer concise bullet points and numbers. Use INR (₹) and Indian market terms.`;\n        const fullPrompt = [\n            systemPreamble,\n            context ? `Context:\\n${context}` : undefined,\n            `Question:\\n${question}`,\n            `Answer: (keep it concise and helpful)`\n        ].filter(Boolean).join(\"\\n\\n\");\n        if (!this.model) {\n            // Helpful fallback without external API\n            return [\n                \"AI is running in fallback mode (no API key). Here are general tips:\",\n                \"- Corporate bonds are debt issued by companies; returns come via coupons and principal at maturity.\",\n                \"- Price guidance weighs G-Sec yields + rating spread + time to maturity.\",\n                \"- In this prototype, trades can be simulated; on-chain settlement uses Sepolia in production.\",\n                \"\",\n                \"Disclaimer: This is educational, not investment advice.\"\n            ].join(\"\\n\");\n        }\n        try {\n            const result = await this.model.generateContent(fullPrompt);\n            const response = await result.response;\n            const text = response.text();\n            return text.trim();\n        } catch (error) {\n            console.error(\"Gemini assistant error:\", error);\n            return \"Sorry, I could not process that right now. Please try again in a moment.\";\n        }\n    }\n}\nconst geminiService = new GeminiFinancialService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/gemini.ts\n");

/***/ })

};
;